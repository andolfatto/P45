// This code conforms with the UFC specification version 1.6.0dev
// and was automatically generated by FFC version 1.6.0dev.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_D0D7ACA99DB9E1CEA35B1F3C3BA249472873DFA5_H
#define __FFC_FORM_D0D7ACA99DB9E1CEA35B1F3C3BA249472873DFA5_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 10; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), **{'value_shape': (3,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 22;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 22; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 22; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[24];
    for (unsigned int r = 0; r < 24; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 22; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 13:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 14:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 15:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 18:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 19:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 20:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 21:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[2];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[2];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[2];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[21] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[4] = dof_values[11];
    vertex_values[7] = dof_values[12];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[16];
    vertex_values[5] = dof_values[17];
    vertex_values[8] = dof_values[18];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_2();
        break;
      }
    case 2:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + 2*num_global_entities[1] + num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[7] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[8] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[9] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[10] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[11] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[12] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[13] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[14] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[15] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[16] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[17] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[18] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[19] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None), **{'value_shape': (3,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 3*num_global_entities[0] + 4*num_global_entities[1] + num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 22;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 10;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += num_global_entities[2];
    dofs[10] = offset + c.entity_indices[0][0];
    dofs[11] = offset + c.entity_indices[0][1];
    dofs[12] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[13] = offset + c.entity_indices[1][0];
    dofs[14] = offset + c.entity_indices[1][1];
    dofs[15] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[16] = offset + c.entity_indices[0][0];
    dofs[17] = offset + c.entity_indices[0][1];
    dofs[18] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[19] = offset + c.entity_indices[1][0];
    dofs[20] = offset + c.entity_indices[1][1];
    dofs[21] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 10;
      dofs[5] = 12;
      dofs[6] = 14;
      dofs[7] = 16;
      dofs[8] = 18;
      dofs[9] = 20;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 10;
      dofs[5] = 11;
      dofs[6] = 15;
      dofs[7] = 16;
      dofs[8] = 17;
      dofs[9] = 21;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 10;
        dofs[2] = 16;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 11;
        dofs[2] = 17;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 12;
        dofs[2] = 18;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 13;
        dofs[3] = 19;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
        dofs[2] = 14;
        dofs[3] = 20;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 15;
        dofs[3] = 21;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[7] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[8] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[9] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[10] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[11] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[12] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[13] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[14] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[15] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[16] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[17] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[18] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[19] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[20] = vertex_coordinates[0];
    dof_coordinates[21] = vertex_coordinates[1];
    dof_coordinates[22] = vertex_coordinates[2];
    dof_coordinates[23] = vertex_coordinates[3];
    dof_coordinates[24] = vertex_coordinates[4];
    dof_coordinates[25] = vertex_coordinates[5];
    dof_coordinates[26] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[27] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[28] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[29] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[30] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[31] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[32] = vertex_coordinates[0];
    dof_coordinates[33] = vertex_coordinates[1];
    dof_coordinates[34] = vertex_coordinates[2];
    dof_coordinates[35] = vertex_coordinates[3];
    dof_coordinates[36] = vertex_coordinates[4];
    dof_coordinates[37] = vertex_coordinates[5];
    dof_coordinates[38] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[39] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[40] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[41] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[42] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[43] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 3;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_2();
        break;
      }
    case 2:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    3
    // Number of operations (multiply-add pairs) for tensor contraction: 8
    // Total number of operations (multiply-add pairs):                  14
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0 = det*w[0][0]*(1.0);
    const double G1_0 = det*w[1][0]*(1.0);
    const double G2_0 = det*w[2][0]*(1.0);
    
    // Compute element tensor
    A[0] = 0.0166666666666666*G0_0;
    A[1] = 0.0166666666666666*G0_0;
    A[2] = 0.0166666666666666*G0_0;
    A[3] = 0.0375*G0_0;
    A[4] = 0.0375000000000001*G0_0;
    A[5] = 0.0375*G0_0;
    A[6] = 0.0375000000000001*G0_0;
    A[7] = 0.0375*G0_0;
    A[8] = 0.0375*G0_0;
    A[9] = 0.225*G0_0;
    A[10] = 0.0;
    A[11] = 0.0;
    A[12] = 0.0;
    A[13] = 0.166666666666667*G1_0;
    A[14] = 0.166666666666667*G1_0;
    A[15] = 0.166666666666667*G1_0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.0;
    A[19] = 0.166666666666667*G2_0;
    A[20] = 0.166666666666667*G2_0;
    A[21] = 0.166666666666667*G2_0;
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_0: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_0() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_1: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_1() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_2: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_2() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_3: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_3() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_4: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_4() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_4()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_5: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_5() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_5()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_6: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_6() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_6()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_7: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_7() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_7()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_8: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_8() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_8()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_9: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_9() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_9()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_10: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_10() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_10()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_11: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_11() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_11()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_12: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_12() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_12()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_13: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_13() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_13()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_14: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_14() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_14()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_15: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_15() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_15()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_16: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_16() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_16()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_17: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_17() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_17()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_18: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_18() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_18()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_19: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_19() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_19()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_20: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_20() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_20()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_21: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_21() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_21()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_22: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_22() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_22()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_23: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_23() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_23()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_24: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_24() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_24()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_25: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_25() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_25()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_26: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_26() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_26()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_27: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_27() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_27()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_28: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_28() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_28()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_29: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_29() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_29()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_30: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_30() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_30()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_31: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_31() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_31()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_32: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_32() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_32()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_33: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_33() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_33()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_34: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_34() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_34()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_35: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_35() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_35()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_36: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_36() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_36()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_37: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_37() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_37()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_38: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_38() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_38()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_39: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_39() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_39()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_40: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_40() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_40()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_41: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_41() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_41()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_42: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_42() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_42()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_43: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_43() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_43()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of
/// an expression evaluated at exactly one vertex.

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_44: public ufc::vertex_integral
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_44() : ufc::vertex_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_44()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from the local vertex
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t vertex,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    
    
    // Array of quadrature weights.
    static const double W1 = 1.0;
    // Quadrature points on the UFC reference element: ()
    
    // Values of basis functions at quadrature points.
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 22; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 7.0*W1*w[0][0];
    G[1] = 7.0*W1*w[1][0];
    G[2] = 7.0*W1*w[2][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (vertex)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[0] += G[0];
        // Number of operations to compute entry: 1
        A[10] += G[1];
        // Number of operations to compute entry: 1
        A[16] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[1] += G[0];
        // Number of operations to compute entry: 1
        A[11] += G[1];
        // Number of operations to compute entry: 1
        A[17] += G[2];
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 3
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 3
      for (unsigned int ip = 0; ip < 1; ip++)
      {
        
        // Number of operations for primary indices: 3
        // Number of operations to compute entry: 1
        A[12] += G[1];
        // Number of operations to compute entry: 1
        A[18] += G[2];
        // Number of operations to compute entry: 1
        A[2] += G[0];
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "0aa39e2440b467b0ee96fd3683105621ef4c26e647a753dabcabf1e227a631e0be849057ddea2c13c9752dc47137d54657cf534a20166f24021d1adfbb3316cf";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 3;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0();
        break;
      }
    case 2:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0();
        break;
      }
    case 3:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0();
        break;
      }
    case 2:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0();
        break;
      }
    case 3:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_dofmap_0();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 45;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return true;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    switch (subdomain_id)
    {
    case 0:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_0();
        break;
      }
    case 1:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_1();
        break;
      }
    case 2:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_2();
        break;
      }
    case 3:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_3();
        break;
      }
    case 4:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_4();
        break;
      }
    case 5:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_5();
        break;
      }
    case 6:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_6();
        break;
      }
    case 7:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_7();
        break;
      }
    case 8:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_8();
        break;
      }
    case 9:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_9();
        break;
      }
    case 10:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_10();
        break;
      }
    case 11:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_11();
        break;
      }
    case 12:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_12();
        break;
      }
    case 13:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_13();
        break;
      }
    case 14:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_14();
        break;
      }
    case 15:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_15();
        break;
      }
    case 16:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_16();
        break;
      }
    case 17:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_17();
        break;
      }
    case 18:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_18();
        break;
      }
    case 19:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_19();
        break;
      }
    case 20:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_20();
        break;
      }
    case 21:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_21();
        break;
      }
    case 22:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_22();
        break;
      }
    case 23:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_23();
        break;
      }
    case 24:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_24();
        break;
      }
    case 25:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_25();
        break;
      }
    case 26:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_26();
        break;
      }
    case 27:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_27();
        break;
      }
    case 28:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_28();
        break;
      }
    case 29:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_29();
        break;
      }
    case 30:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_30();
        break;
      }
    case 31:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_31();
        break;
      }
    case 32:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_32();
        break;
      }
    case 33:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_33();
        break;
      }
    case 34:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_34();
        break;
      }
    case 35:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_35();
        break;
      }
    case 36:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_36();
        break;
      }
    case 37:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_37();
        break;
      }
    case 38:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_38();
        break;
      }
    case 39:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_39();
        break;
      }
    case 40:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_40();
        break;
      }
    case 41:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_41();
        break;
      }
    case 42:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_42();
        break;
      }
    case 43:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_43();
        break;
      }
    case 44:
      {
        return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_vertex_integral_0_44();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_d0d7aca99db9e1cea35b1f3c3ba249472873dfa5_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
