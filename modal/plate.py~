from dolfin import *
import numpy as np
from subprocess import call
import datetime
import sys


# Form compiler options
parameters["form_compiler"]["cpp_optimize"] = True
parameters["form_compiler"]["optimize"] = True


rint = 0.05668/2
rest = 0.12
res  = 3e-3

### impongo l'offset nel file input di gmsh, genero e converto la mesh
newline1='DefineConstant[ r1 = { %.4f, Path "Gmsh/Parameters"}];\n'  % rint
newline2='DefineConstant[ r2 = { %.4f, Path "Gmsh/Parameters"}];\n'  %rest
newline3='DefineConstant[ res= { %.4f, Path "Gmsh/Parameters"}];\n'  %res
with open('geom.geo') as fid:
	lines = fid.readlines()
lines[0] = lines[0].replace(lines[0], newline1)
lines[1] = lines[1].replace(lines[1], newline2)
lines[2] = lines[2].replace(lines[2], newline3)
with open('geom.geo', 'w') as fid2:
	for line in lines:
		fid2.write(line)



#call(["gmsh", "geom.geo", "-2"])
#call(["dolfin-convert", "geom.msh" , "mesh.xml"])
mesh = Mesh("mesh.xml")



L1 = FunctionSpace(mesh, 'Lagrange', 2)
L2 = FunctionSpace(mesh, 'Lagrange', 3)
L = MixedFunctionSpace([L2, L1, L1])







#MATERIAL DATA#
E = 9.1e+10#Pa
nu = 0.24
t = 0.00161#m
rho = 2530##Kg/m^3



t3 = t*t*t
G = E/2/(1+nu)
nu2 = nu*nu
D_tensor = E*t3/12/(1-nu2)*as_tensor([    [   1  ,  nu  ,    0     ] ,\
                                          [  nu  ,   1   ,    0    ] ,\
                                          [   0  ,   0  , (1-nu)/2 ] ])

M_tensor = rho*as_tensor([   [   t    ,   0      ,    0  ] ,\
                             [   0    ,   t3/12  ,    0  ] ,\
                             [   0    ,   0      , t3/12 ] ])


def eps_fl(thx,thy):
	"Computes flexional deformation vector according to mindlin plate"
	mx = as_tensor([[0 , 0],\
			[0 ,-1],\
			[1 , 0]])
	my = as_tensor([[1 , 0],\
			[0 , 0],\
			[0 ,-1]])
	return mx*nabla_grad(thx)+my*nabla_grad(thy)
      
def eps_sh(w,thx,thy):
	"Computes shear deformation vector according to mindlin plate"
	mx = as_vector([0 , -1])
	
	my = as_vector([1 , 0])
	return mx*thx+my*thy+nabla_grad(w)

def StiffnessMatrix(test, trial):
	"Computes stiffness matrix according with mindlin plate's theory"
	(testw,testx,testy) = split(test)
	(trialw,trialx,trialy) = split(trial)
	return (inner(eps_fl(testx , testy) , D_tensor * eps_fl(trialx, trialy))+\
	        inner(eps_sh(testw , testx , testy) , eps_sh(trialw , trialx , trialy) ) * G * t  ) *dx

def LumpedStiffnessMatrix(test, trial):
	"Computes lumped part of stiffness matrix according with mindlin plate's theory"
	(testw,testx,testy) = split(test)
	(trialw,trialx,trialy) = split(trial)   
	return inner(as_vector([testw, testx, testy]), Lumped_K_tensor * as_vector([trialw, trialx, trialy])) * dp(1)
def MassMatrix(test, trial):
	"Computes mass matrix according with mindlin plate's theory"
	(testw,testx,testy) = split(test)
	(trialw,trialx,trialy) = split(trial)
	return inner(as_vector([testw, testx, testy]), M_tensor * as_vector([trialw, trialx, trialy])) * dx    
def LumpedMassMatrix(test, trial):
	"Computes lumped part of stiffness matrix according with mindlin plate's theory"
	(testw,testx,testy) = split(test)
	(trialw,trialx,trialy) = split(trial)   
	return inner(as_vector([testw, testx, testy]), Lumped_M_tensor * as_vector([trialw, trialx, trialy])) * dp(1)  




#DIRICHLET BCS#
#w#
w_val = Constant(0.)
class w_constraint(SubDomain):
	def inside(self, x, on_boundary):
		return  on_boundary and x[0]*x[0]+x[1]*x[1]<rint*rint*1.1
w_Constraint = w_constraint()
w_boundaries = MeshFunction("size_t", mesh, 1)
w_boundaries.set_all(0)
w_Constraint.mark(w_boundaries, 1)#set 1 to activate, , 0 to deactivate
w_bc = DirichletBC(L.sub(0), w_val, w_boundaries,1)
#theta_x#
theta_x_val = Constant(0.)
class theta_x_constraint(SubDomain):
	def inside(self, x, on_boundary):
		return  on_boundary and x[0]*x[0]+x[1]*x[1]<rint*rint*1.1
theta_x_Constraint = theta_x_constraint()
theta_x_boundaries = MeshFunction("size_t", mesh, 1)
theta_x_boundaries.set_all(0)
theta_x_Constraint.mark(theta_x_boundaries, 0)#set 1 to activate, 0 to deactivate
theta_x_bc = DirichletBC(L.sub(1), theta_x_val, theta_x_boundaries,1)
#theta_y#
theta_y_val = Constant(0.)
class theta_y_constraint(SubDomain):
	def inside(self, x, on_boundary):
		return  on_boundary and x[0]*x[0]+x[1]*x[1]<rint*rint*1.1
theta_y_Constraint = theta_y_constraint()
theta_y_boundaries = MeshFunction("size_t", mesh, 1)
theta_y_boundaries.set_all(0)
theta_y_Constraint.mark(theta_y_boundaries, 0)#set 1 to activate,q 0 to deactivate
theta_y_bc = DirichletBC(L.sub(2), theta_y_val, theta_y_boundaries,1)

bcs = [ w_bc , theta_x_bc , theta_y_bc ]



#LUMPED PARAMETERS#
Lumped_K_tensor = as_tensor([    [ -87.4 , 0.          , 0.           ],\
                                 [ 0.           , 7e-5 , 0.           ],\
                                 [ 0.           , 0.          ,  7e-5 ]])

Lumped_M_tensor = as_tensor([    [ 4.3201e-3 , 0.        , 0.        ],\
                                 [ 0.        , 1.6418e-7 , 0.        ],\
                                 [ 0.        , 0.        , 1.6418e-7 ]])
class lumped(SubDomain):
	def inside(self, x, on_boundary):
		toll = 1e-5
		return  (near(x[0] , -2.3500000000000000e-02 , toll) and near(x[1] ,   1.0305000000000000e-01 , toll) ) or\
                        (near(x[0] , -5.2900000000000003e-02 , toll) and near(x[1] ,   9.1535000000000005e-02 , toll) ) or\
                        (near(x[0] , -9.5200000000000007e-02 , toll) and near(x[1] ,   4.5859999999999998e-02 , toll) ) or\
                        (near(x[0] , -1.0452000000000000e-01 , toll) and near(x[1] ,   1.5751999999999999e-02 , toll) ) or\
                        (near(x[0] , -1.0452000000000000e-01 , toll) and near(x[1] ,  -1.5800000000000002e-02 , toll) ) or\
                        (near(x[0] , -5.2900000000000003e-02 , toll) and near(x[1] ,  -9.1499999999999998e-02 , toll) ) or\
                        (near(x[0] ,  7.8989999999999998e-03 , toll) and near(x[1] ,  -1.0539999999999999e-01 , toll) ) or\
                        (near(x[0] ,  3.8614999999999997e-02 , toll) and near(x[1] ,  -9.8390000000000005e-02 , toll) ) or\
                        (near(x[0] , -7.7499999999999999e-02 , toll) and near(x[1] ,   7.1891999999999998e-02 , toll) ) or\
                        (near(x[0] ,  7.8989999999999998e-03 , toll) and near(x[1] ,   1.0539999999999999e-01 , toll) ) or\
                        (near(x[0] ,  6.5900000000000000e-02 , toll) and near(x[1] ,   8.2636000000000001e-02 , toll) ) or\
                        (near(x[0] ,  8.7330000000000005e-02 , toll) and near(x[1] ,   5.9540999999999997e-02 , toll) ) or\
                        (near(x[0] ,  1.0100000000000001e-01 , toll) and near(x[1] ,   3.1154000000000001e-02 , toll) ) or\
                        (near(x[0] ,  1.0100000000000001e-01 , toll) and near(x[1] ,  -3.1199999999999999e-02 , toll) ) or\
                        (near(x[0] ,  6.5900000000000000e-02 , toll) and near(x[1] ,  -8.2600000000000007e-02 , toll) ) or\
                        (near(x[0] , -7.7499999999999999e-02 , toll) and near(x[1] ,  -7.1900000000000006e-02 , toll) ) or\
                        (near(x[0] ,  6.8339999999999998e-02 , toll) and near(x[1] ,  -3.0400000000000000e-02 , toll) ) or\
                        (near(x[0] , -7.3200000000000001e-02 , toll) and near(x[1] ,   1.5553000000000001e-02 , toll) ) or\
                        (near(x[0] , -4.1300000000000003e-02 , toll) and near(x[1] ,   1.5016000000000000e-02 , toll) ) or\
                        (near(x[0] , -4.1300000000000003e-02 , toll) and near(x[1] ,  -1.4999999999999999e-02 , toll) ) or\
                        (near(x[0] , -6.0519999999999997e-02 , toll) and near(x[1] ,   4.3971000000000003e-02 , toll) ) or\
                        (near(x[0] ,  6.8339999999999998e-02 , toll) and near(x[1] ,   3.0426999999999999e-02 , toll) ) or\
                        (near(x[0] , -7.8200000000000006e-03 , toll) and near(x[1] ,   7.4397000000000005e-02 , toll) ) or\
                        (near(x[0] ,  2.3116999999999999e-02 , toll) and near(x[1] ,   7.1146000000000001e-02 , toll) ) or\
                        (near(x[0] ,  5.0056000000000003e-02 , toll) and near(x[1] ,   5.5592999999999997e-02 , toll) ) or\
                        (near(x[0] , -7.3200000000000001e-02 , toll) and near(x[1] ,  -1.5599999999999999e-02 , toll) ) or\
                        (near(x[0] , -7.8200000000000006e-03 , toll) and near(x[1] ,  -7.4399999999999994e-02 , toll) ) or\
                        (near(x[0] , -3.7400000000000003e-02 , toll) and near(x[1] ,  -6.4799999999999996e-02 , toll) ) or\
                        (near(x[0] ,  4.3903999999999999e-02 , toll) and near(x[1] ,   0.0000000000000000e+00 , toll) ) or\
                        (near(x[0] , -2.1999999999999999e-02 , toll) and near(x[1] ,   3.8022000000000000e-02 , toll) ) or\
                        (near(x[0] ,  7.6239999999999997e-03 , toll) and near(x[1] ,  -4.3200000000000002e-02 , toll) ) or\
                        (near(x[0] ,  7.6239999999999997e-03 , toll) and near(x[1] ,   4.3236999999999998e-02 , toll) ) or\
                        (near(x[0] ,  3.3632000000000002e-02 , toll) and near(x[1] ,   2.8221000000000000e-02 , toll) ) or\
                        (near(x[0] , -2.3500000000000000e-02 , toll) and near(x[1] ,  -1.0305000000000000e-01 , toll) ) or\
                        (near(x[0] ,  2.3116999999999999e-02 , toll) and near(x[1] ,  -7.1199999999999999e-02 , toll) ) or\
                        (near(x[0] , -9.5200000000000007e-02 , toll) and near(x[1] ,  -4.5859999999999998e-02 , toll) ) or\
                        (near(x[0] ,  1.0570000000000000e-01 , toll) and near(x[1] ,   0.0000000000000000e+00 , toll) ) or\
                        (near(x[0] ,  8.7330000000000005e-02 , toll) and near(x[1] ,  -5.9499999999999997e-02 , toll) ) or\
                        (near(x[0] , -6.0519999999999997e-02 , toll) and near(x[1] ,  -4.3999999999999997e-02 , toll) ) or\
                        (near(x[0] ,  5.0056000000000003e-02 , toll) and near(x[1] ,  -5.5599999999999997e-02 , toll) ) or\
                        (near(x[0] ,  7.4806999999999998e-02 , toll) and near(x[1] ,   0.0000000000000000e+00 , toll) ) or\
                        (near(x[0] , -3.7400000000000003e-02 , toll) and near(x[1] ,   6.4784999999999995e-02 , toll) ) or\
                        (near(x[0] ,  3.3632000000000002e-02 , toll) and near(x[1] ,  -2.8199999999999999e-02 , toll) ) or\
                        (near(x[0] , -2.1999999999999999e-02 , toll) and near(x[1] ,  -3.7999999999999999e-02 , toll) ) or\
                        (near(x[0] ,  3.8614999999999997e-02 , toll) and near(x[1] ,   9.8390000000000005e-02 , toll) )
                        
Lumped = lumped()
lumped_boundaries = MeshFunction("size_t", mesh, 0)
lumped_boundaries.set_all(0)
Lumped.mark(lumped_boundaries, 1)#set 1 to activate
dp = Measure('vertex')[lumped_boundaries]

#plot(lumped_boundaries, title = 'actuators')
#plot(w_boundaries, title = 'w constraint region')
#plot(theta_x_boundaries, title = 'theta_x constraint region')
#plot(theta_y_boundaries, title = 'theta_y constraint region')
#interactive()


#NORMAL MODES BUILDING#
test = TestFunction(L)
trial = TrialFunction(L)

#K#
K = PETScMatrix()
assemble(StiffnessMatrix(test,trial)+LumpedStiffnessMatrix(test,trial), tensor=K)
#assemble(StiffnessMatrix(test,trial), tensor=K)
#for bc in bcs: bc.apply(K)

#M#
lflag = False #set True to lump
M = PETScMatrix()
if lflag:
	print 'Assembling lumped mass'
	mass_form = MassMatrix(test,trial)+LumpedMassMatrix(test,trial)
	#mass_form = MassMatrix(test,trial)
	I = Constant([1,0,0])
	mass_action_form = action(mass_form,I)
	assemble(mass_form,tensor = M)
	M.zero()
	M.set_diagonal(assemble(mass_action_form))
else:
	print 'Assembling consistent mass'
	assemble(MassMatrix(test,trial)+LumpedMassMatrix(test,trial), tensor=M)
	#assemble(MassMatrix(test,trial), tensor=M)
#for bc in bcs: bc.zero(M)

eigensolver = SLEPcEigenSolver(K,M)
eigensolver.parameters["spectrum"] = "smallest magnitude"
eigensolver.parameters["solver"] = "arnoldi"
eigensolver.parameters["spectral_transform"] = "shift-and-invert"
eigensolver.parameters["spectral_shift"] = 1e3
print "Computing eigenvalues. This can take minutes."
time1 = datetime.datetime.now()
nmodes = 40
eigensolver.solve(nmodes)
time2 =  datetime.datetime.now()
print 'Computation time: ',time2-time1
for index in range(nmodes):
  r, c, rx, cx = eigensolver.get_eigenpair(index)
  if c>0.001 or c < -0.001:
    print 'Warning, complex eigenvalue detected @ mode {}'.format(index+1)
  if r>0:
    f = np.sqrt(r)/2/pi
  elif r==0:
    f = 0
  else:
    f = np.sqrt(-r)/2/pi
    print 'Warning, negative real part detected @ mode {}'.format(index+1)
  print('{} :    {} Hz'.format(index+1 , f))




#mi serve per fare la domanda
def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")




if query_yes_no("Should I plot the modes?"):
  for index in range(nmodes):
    r, c, rx, cx = eigensolver.get_eigenpair(index)
    if r>0:
      f = np.sqrt(r)/2/pi
    elif r==0:
      f = 0
    else:
      f = np.sqrt(-r)/2/pi
    # Initialize function and assign eigenvector
    u = Function(L)
    u.vector()[:] = rx
    (wx,txx,tyx) = split(u)
    # Plot eigenfunction
    plot(wx, title = "%dth mode @ %.2f Hz" % (index+1, f))
  interactive()

exit()
